#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Full
Input = Stream
Parser = LR
#RegularDefinitions
DIGIT : [0-9]
CHAR : [a-zA-Z]
SLASH : "/"
STAR : "*"

NEW_LINE : \n
CARRIAGE_RETURN : \r
SPACE : \s
TAB : \t
WS : [\s\t\n\r]
#Tokens
: {WS}*

COMMENT : {SLASH}{SLASH}(.)*|{SLASH}{STAR}{NEW_LINE}?(.*){NEW_LINE}?{STAR}{SLASH}

INDET : (_)*{CHAR}(_|{CHAR}|{DIGIT})*
INT : [1-9]{DIGIT}*
FLOAT : {DIGIT}+\.{DIGIT}+
CHAR : '{CHAR}'
STRING : \"({CHAR}|{DIGIT}|{NEW_LINE}|{CARRIAGE_RETURN}|{SPACE}|{TAB}|')*\" // need improvement
BOOL : "true"|"false"

ADD : "+"
SUB : "-"
MUL : "*"
QUO : "/"
REM : "%"

AND : "&"
OR : "|"
XOR : "^"
SHL : "<<"
SHR : ">>"

ADD_ASSIGN : "+="
SUB_ASSIGN : "-="
MUL_ASSIGN : "*="
QUO_ASSIGN : "/="
REM_ASSIGN : "%="

AND_ASSIGN : "&="
OR_ASSIGN : "|="
XOR_ASSIGN : "^="
SHL_ASSIGN : "<<="
SHR_ASSIGN : ">>="

LAND : "&&"
LOR : "||"
INC : "++"
DEC : "--"

EQL : "=="
LSS : "<"
GTR : ">"
ASSIGN : "="
NOT : "!"

NEQ : "!="
LEQ : "<="
GEQ : ">="
DEFINE : ":="

LPAREN : "("
LBRACK : "["
LBRACE : "{"
COMMA : ","
PERIOD : "."

RPAREN : ")"
RBRACK : "]"
RBRACE : "}"
SEMICOLON : ";"
COLON : ":"

VAR = INDET : "var"
CONST = INDET : "const"

IF = INDET : "if"
ELSE = INDET : "else"

FOR = INDET : "for"

SWITCH = INDET : "switch"
CASE = INDET : "case"
DEFAULT = INDET : "default"

CONTINUE = INDET : "continue"
BREAK = INDET : "break"

FUNCTION = INDET : "function"
RETURN = INDET : "return"

STRUCT = INDET : "struct"
TYPE = INDET : "type"

TYPE_INT = INDET : "int"
TYPE_INT32 = INDET : "int32"
TYPE_INT64 = INDET : "int64"

TYPE_FLOAT32 = INDET : "float32"
TYPE_FLOAT64 = INDET : "float64"

TYPE_STRING = INDET : "string"
TYPE_BOOL = INDET : "bool"
TYPE_BYTE = INDET : "byte"
#NonTerminals
<declarations>
<declaration>
<var_decl>
<const_decl>
<type_decl>
<identifier_list>
<expression_list>
<identifier>
<type>
<expression>
<term> 
<factor>
<add_op>
<mul_op>
<literal>
<int_literal>
<float_literal>
<char_literal>
<string_literal>
<bool_literal>
#Grammar
<declarations> ::= <declaration> <declarations> | <declaration> ;
<declaration> ::= <var_decl> | <const_decl> | <type_decl> ;
<var_decl> ::= VAR <identifier_list> <type> ASSIGN <expression_list> ;
<const_decl> ::= CONST <identifier_list> <type> ASSIGN <expression_list>  ;
<type_decl> ::= TYPE <identifier> <type> ;
<identifier_list> ::= <identifier> COMMA <identifier_list> | <identifier> ;
<expression_list> ::= <expression> COMMA <expression_list> | <expression> ;
<identifier> ::= INDET ;
<type> ::= <identifier> | TYPE_INT | TYPE_INT32 | TYPE_INT64 | TYPE_FLOAT32 | TYPE_FLOAT64 | TYPE_STRING | TYPE_BOOL | TYPE_BYTE ;
<expression> ::= <term> <add_op> <expression> | <term> ;
<term> ::= <factor> <mul_op> <term> | <factor> ;
<factor> ::= <identifier> | <literal> | LPAREN <expression> RPAREN ;
<add_op> ::= ADD | SUB ;
<mul_op> ::= MUL | QUO ;
<literal> ::= <int_literal> | <float_literal> | <string_literal> | <bool_literal> ;
<int_literal> ::=  INT ;
<float_literal> ::=  FLOAT ;
<char_literal> ::= CHAR ;
<string_literal> ::= STRING ;
<bool_literal> ::= BOOL;
