1 + -1;
-1 - +1;
!true;
1 + 2 + ~1;

1++;
1--;

(1 + 1) > 1;
(1 + 1) < 1;
(1 + 1) >= 1;
(1 + 1) <= 1;
(1 + 1) == 2;

1 < 10 && 1 > 0;
true && true;
false || true;

let a: int = 1;
let b: float = 1.1;
let c: char = 'a';
let d: string = "hello world\n";
let e: bool = true;

{
    a = 2;
    b = 2.2;
    c = 'b';
    d = "kjkszpj";
    e = false;
}

const const_a: int = 1;
const const_b: float = 1.1;
const const_c: char = 'a';
const const_d: string = "hello world\n";
const const_e: bool = true;

let a_uinit: int;
a_uinit = 1;

let b_uinit: string;
b_uinit = "message";

if (const_a < const_b) {
    return "const_a < const_b";
} else if (const_c == 'a') {
    return "const_c == \'a\'\n";
} else if (const_d == "hello world\n") {
    return "const_d == \"hello world\n\"";
} else if (const_e) {
    return "const_e == true";
} else {
    return "none\n";
}

let counter: int = 0;
while (counter < 10) {
    counter += 1;
}

while (true) {
    counter--;
    if (counter == 0) {
        break;
    }
}

const numbers: []int = []int{0, 1, 2, 3};
numbers[0] = 10;

const username: string = "john doe";
username[4] = '-';

func add(a: int, b: int): int {
    return a + b;
}

let result: int = add(1, 2);

const sub = func(a: int, b: int): int {
    return a - b;
};

func execOperation(left: int, right: int, cb: func(int, int): int): int {
    return cb(left, right);
}

let opResult: int = execOperation(2, 5, sub);

func mul(a: int, b: int): int {
    return a * b;
}

const mulResult: int = func(a: int, b: int, cb: func(int, int): int): int {
    return cb(a, b);
}(4, 4, mul);

func fibonacci(num: int): int {
    if (num <= 1) {
        return num;
    }

    return fibonacci(num - 1) + fibonacci(num - 2);
}

let fib = func(num: int): int {
    if (num <= 1) {
        return num;
    }

    return fib(num - 1) + fib(num - 2);
};

func getCalcFunc(option: string): nil | func(int, int): int {
    const add = func(a: int, b: int): int {
        return a + b;
    };

    const sub = func(a: int, b: int): int {
        return a - b;
    };

    const mul = func(a: int, b: int): int {
        return a * b;
    };

    const div = func(a: int, b: int): int {
        return a / b;
    };

    if (option == "add") {
        return add;
    } else if (option == "sub") {
        return sub;
    } else if (option == "mul") {
        return mul;
    } else if (option == "div") {
        return div;
    } else {
        return nil;
    }
}

struct User {
    id: int
    username: string
    password: string
    email: string
    address: struct {
        street: string
        zip: string
    }
}

const john: User = User{
    id: 1,
    username: "john",
    password: "12345",
    email: "john@email.com",
    address: struct{
        street: string
        zip: string
    }{
        street: "street name",
        zip: "111222"
    }
};

func makeUser(id: int, username: string, password: string, email: string, street: string, zip: string): User {
    return User{
        id: id,
        username: username,
        password: password,
        email: email,
        address: struct{
            street: string
            zip: string
        }{
            street: street,
            zip: zip
        }
    };
}

const ana: User = makeUser(1, "ana123", "12345", "ana@email.com", "street 2", "111222333");
