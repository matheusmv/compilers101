2 + 2;
2 - 2;
2 * 2;
2 / 2;
4 % 2;

~2;
2 & 2;
2 | 2;
2 ^ 2;
1 << 2;
4 >> 1;

1 == 1;
1 != 1;
1 <= 10;
1 >= 10;
1 < 10;
1 > 0;
!true;

"hello," + " world";
'h' + "ello" + ',' + ' ' + "world";

let a = 1;
let b = 0;
while (b < 10) {
    println("a: ", a);
    println("b: ", b);

    if (a == 2) {
        b = b + 1;
        continue;
    }

    a++;
}

for (let i = 0; i < 10; i++) {
    println(i);
}

func add(a: int, b: int): int {
    return a + b;
}

func sub(a: int, b: int): int {
    return a - b;
}

func apply(a: int, b: int, cb: func(int, int): int): int {
    return cb(a, b);
}

apply(2, 2, add);
apply(2, 5, sub);

let result = "";

if (apply(2, 2, add) == 4) {
    result = "apply(2, 2, add) == 4";
}

println(result);

let addExpr = func(a: int, b: int): int {
    return a + b;
};

addExpr(4, 5);

let ok = 1 == 10 ? "1 == 10" : "1 != 10";

if (1 < 10 && 4 % 2 == 0) {
    println("ok");
}

let username = input("say your name: ");
println(username);

let numberFive = "false";

{
    let j = numberFive.(bool);
    let test = numberFive.(bool);
    println(j, "-", test);
    {
        let testInner = "inner message";
        println(j, " - ", !test, "(", testInner, ")");
    }
}

let numberA = input("a: ").(float);
let numberB = input("b: ").(float);

println(numberA, " + ", numberB, " = ", addExpr(numberA.(int), numberB.(int)));

let numberC = 15;

numberC += 1;
numberC -= 1;
numberC *= 2;
numberC /= 1;
numberC %= 1;

numberC &= 1;
numberC |= 1;
numberC ^= 1;
numberC <<= 1;
numberC >>= 1;

let oneString = "hello";

oneString += ", ";
oneString += "world";

println(oneString);
println(numberC);

numberC += 101;
println(numberC);

let sumFuncExprResult = func(a: int, b: int): int {
    return a + b;
}(1, numberC);

println(sumFuncExprResult);

let arrStr = []string{
    "context",
    "interpreter",
    "list",
    "map"
};

let str = arrStr[0];
str = "absdadsada";
println(str);
println(arrStr[0]);

let matNum = [][]int{
    []int{1, 2, 3},
    []int{4, 5, 6},
    []int{7, 8, 9}
};

println(matNum);
// TODO: fix type check
let idx: []int = matNum[0][1];
println(idx);

let concatF = func(strs: []string): string {
    let result = "";

    for (let i = 0; i < len(strs); i++) {
        result += strs[i];
    }

    return result;
}(arrStr);

println(concatF);
println(len(concatF));
